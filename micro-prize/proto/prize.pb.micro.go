// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/prize.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Prize service

func NewPrizeEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Prize service

type PrizeService interface {
	PrizeList(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	PrizeAdd(ctx context.Context, in *Prize, opts ...client.CallOption) (*Response, error)
	PrizeDel(ctx context.Context, in *NameRequest, opts ...client.CallOption) (*Response, error)
	PrizeEdit(ctx context.Context, in *Prize, opts ...client.CallOption) (*Response, error)
	PrizeInfo(ctx context.Context, in *NameRequest, opts ...client.CallOption) (*InfoResponse, error)
}

type prizeService struct {
	c    client.Client
	name string
}

func NewPrizeService(name string, c client.Client) PrizeService {
	return &prizeService{
		c:    c,
		name: name,
	}
}

func (c *prizeService) PrizeList(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Prize.PrizeList", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prizeService) PrizeAdd(ctx context.Context, in *Prize, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Prize.PrizeAdd", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prizeService) PrizeDel(ctx context.Context, in *NameRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Prize.PrizeDel", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prizeService) PrizeEdit(ctx context.Context, in *Prize, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Prize.PrizeEdit", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prizeService) PrizeInfo(ctx context.Context, in *NameRequest, opts ...client.CallOption) (*InfoResponse, error) {
	req := c.c.NewRequest(c.name, "Prize.PrizeInfo", in)
	out := new(InfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Prize service

type PrizeHandler interface {
	PrizeList(context.Context, *ListRequest, *ListResponse) error
	PrizeAdd(context.Context, *Prize, *Response) error
	PrizeDel(context.Context, *NameRequest, *Response) error
	PrizeEdit(context.Context, *Prize, *Response) error
	PrizeInfo(context.Context, *NameRequest, *InfoResponse) error
}

func RegisterPrizeHandler(s server.Server, hdlr PrizeHandler, opts ...server.HandlerOption) error {
	type prize interface {
		PrizeList(ctx context.Context, in *ListRequest, out *ListResponse) error
		PrizeAdd(ctx context.Context, in *Prize, out *Response) error
		PrizeDel(ctx context.Context, in *NameRequest, out *Response) error
		PrizeEdit(ctx context.Context, in *Prize, out *Response) error
		PrizeInfo(ctx context.Context, in *NameRequest, out *InfoResponse) error
	}
	type Prize struct {
		prize
	}
	h := &prizeHandler{hdlr}
	return s.Handle(s.NewHandler(&Prize{h}, opts...))
}

type prizeHandler struct {
	PrizeHandler
}

func (h *prizeHandler) PrizeList(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.PrizeHandler.PrizeList(ctx, in, out)
}

func (h *prizeHandler) PrizeAdd(ctx context.Context, in *Prize, out *Response) error {
	return h.PrizeHandler.PrizeAdd(ctx, in, out)
}

func (h *prizeHandler) PrizeDel(ctx context.Context, in *NameRequest, out *Response) error {
	return h.PrizeHandler.PrizeDel(ctx, in, out)
}

func (h *prizeHandler) PrizeEdit(ctx context.Context, in *Prize, out *Response) error {
	return h.PrizeHandler.PrizeEdit(ctx, in, out)
}

func (h *prizeHandler) PrizeInfo(ctx context.Context, in *NameRequest, out *InfoResponse) error {
	return h.PrizeHandler.PrizeInfo(ctx, in, out)
}
