// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/activity.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Activity service

func NewActivityEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Activity service

type ActivityService interface {
	ActiveAdd(ctx context.Context, in *Request, opts ...client.CallOption) (*AddResponse, error)
	ActiveDel(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*Response, error)
	ActiveEdit(ctx context.Context, in *EditRequest, opts ...client.CallOption) (*Response, error)
	ActiveList(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	ActiveInfo(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*InfoResponse, error)
	ActivePrizes(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*PrizesResponse, error)
	ActiveAddPrize(ctx context.Context, in *PrizeAddRequest, opts ...client.CallOption) (*Response, error)
}

type activityService struct {
	c    client.Client
	name string
}

func NewActivityService(name string, c client.Client) ActivityService {
	return &activityService{
		c:    c,
		name: name,
	}
}

func (c *activityService) ActiveAdd(ctx context.Context, in *Request, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "Activity.ActiveAdd", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) ActiveDel(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Activity.ActiveDel", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) ActiveEdit(ctx context.Context, in *EditRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Activity.ActiveEdit", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) ActiveList(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Activity.ActiveList", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) ActiveInfo(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*InfoResponse, error) {
	req := c.c.NewRequest(c.name, "Activity.ActiveInfo", in)
	out := new(InfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) ActivePrizes(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*PrizesResponse, error) {
	req := c.c.NewRequest(c.name, "Activity.ActivePrizes", in)
	out := new(PrizesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) ActiveAddPrize(ctx context.Context, in *PrizeAddRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Activity.ActiveAddPrize", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Activity service

type ActivityHandler interface {
	ActiveAdd(context.Context, *Request, *AddResponse) error
	ActiveDel(context.Context, *IdRequest, *Response) error
	ActiveEdit(context.Context, *EditRequest, *Response) error
	ActiveList(context.Context, *ListRequest, *ListResponse) error
	ActiveInfo(context.Context, *IdRequest, *InfoResponse) error
	ActivePrizes(context.Context, *IdRequest, *PrizesResponse) error
	ActiveAddPrize(context.Context, *PrizeAddRequest, *Response) error
}

func RegisterActivityHandler(s server.Server, hdlr ActivityHandler, opts ...server.HandlerOption) error {
	type activity interface {
		ActiveAdd(ctx context.Context, in *Request, out *AddResponse) error
		ActiveDel(ctx context.Context, in *IdRequest, out *Response) error
		ActiveEdit(ctx context.Context, in *EditRequest, out *Response) error
		ActiveList(ctx context.Context, in *ListRequest, out *ListResponse) error
		ActiveInfo(ctx context.Context, in *IdRequest, out *InfoResponse) error
		ActivePrizes(ctx context.Context, in *IdRequest, out *PrizesResponse) error
		ActiveAddPrize(ctx context.Context, in *PrizeAddRequest, out *Response) error
	}
	type Activity struct {
		activity
	}
	h := &activityHandler{hdlr}
	return s.Handle(s.NewHandler(&Activity{h}, opts...))
}

type activityHandler struct {
	ActivityHandler
}

func (h *activityHandler) ActiveAdd(ctx context.Context, in *Request, out *AddResponse) error {
	return h.ActivityHandler.ActiveAdd(ctx, in, out)
}

func (h *activityHandler) ActiveDel(ctx context.Context, in *IdRequest, out *Response) error {
	return h.ActivityHandler.ActiveDel(ctx, in, out)
}

func (h *activityHandler) ActiveEdit(ctx context.Context, in *EditRequest, out *Response) error {
	return h.ActivityHandler.ActiveEdit(ctx, in, out)
}

func (h *activityHandler) ActiveList(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.ActivityHandler.ActiveList(ctx, in, out)
}

func (h *activityHandler) ActiveInfo(ctx context.Context, in *IdRequest, out *InfoResponse) error {
	return h.ActivityHandler.ActiveInfo(ctx, in, out)
}

func (h *activityHandler) ActivePrizes(ctx context.Context, in *IdRequest, out *PrizesResponse) error {
	return h.ActivityHandler.ActivePrizes(ctx, in, out)
}

func (h *activityHandler) ActiveAddPrize(ctx context.Context, in *PrizeAddRequest, out *Response) error {
	return h.ActivityHandler.ActiveAddPrize(ctx, in, out)
}
